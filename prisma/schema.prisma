generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String? @unique
  name     String?
  avatar   String?
  hash     String

  role      Role    @default(CUSTOMER)
  isBlocked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditCards CreditCard[]

  orders        Order[]
  bookedCars    UserBookCar[]
  savedCars     Car[]   @relation("savedCars")
  publishedCars Car[]   @relation("PublishedCars")

  contryId String?
  contry   Contry? @relation(fields: [contryId], references: [id])
}


model UserBookCar {

  id String @id @default(uuid())
  quantity Int
  bookedAt DateTime @default(now())
  isOrdered Boolean @default(false)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  orderId String?
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, carId, bookedAt])
}

model Contry {
  id String @id @default(uuid())

  name String @unique
  code Int    @unique
  tax  Int

  users    User[]
  chippers Chipper[]
  orders  Order[]

  @@index([name])
}

model CreditCard {
  id     String @id @default(uuid())
  number Int @unique
  name   String
  cvc    Int
  expiry String

  balance Int @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]
}

model Car {
  id               String   @id @default(uuid())
  brand            String   @unique
  description      String
  images           String[]
  availableStock   Int
  price            Int
  reductionPercent Int

  configuration Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usersWhoBooked UserBookCar[]
  usersWhoSaved  User[]  @relation("savedCars")

  publisherId String?
  publisher   User?   @relation("PublishedCars", fields: [publisherId], references: [id], onDelete: SetNull)

  @@index([brand])
}

model Order {
  id          String      @id @default(uuid())
  status      OrderStatus @default(PENDING)
  paymentType PaymentType
  totalPrice Int

  submitedAt DateTime @default(now())
  validatedAt DateTime?
  deliveredAt DateTime?

  bookingsToOrder UserBookCar[]
  documents   Document[]

  orderDetails OrderDetail?

  deliveryContryId String
  deliveryContry   Contry @relation(fields: [deliveryContryId], references: [id])

  creditCardId String?
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)

  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model OrderDetail {
  id           String       @id @default(uuid())
  paymentRange PaymentRange
  remainToPay  Int

  limitDate DateTime?

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Chipper {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referenceContry Contry[]

  @@index([name])
}

model Document {
  id   String       @id @default(uuid())
  type DocumentType
  note String?
  file String       @unique

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CANCELLED
  VALIDATED
  DELIVERED
}

enum DocumentType {
  IMMATRICULATION
  CERTIFICATE
  PURCHASE_FORM
}

enum PaymentType {
  TOTAL_PAY
  CREDIT_PAY
}

enum PaymentRange {
  X2
  X3
  X5
}
